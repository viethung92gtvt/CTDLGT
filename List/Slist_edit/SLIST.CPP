#ifndef SINGLELIST_CPP
#define SINGLELIST_CPP
#include "node.cpp"
using namespace std;
template <class T>
class SingleList{
private:
	Node<T> *header;  // Con tro tro vao dau danh sach
	Node<T> *trailer; // Con tro tro vao phan tu cuoi cua danh sach
	long n;		       // so phan tu hien co cua danh sach
public:
	SingleList();
	long   size();
	int    isEmpty();
	Node<T>* first();	// Tra lai dia chi do con tro header tro den
	Node<T>* last();	// Tra lai dia chi do con tro trailer tro den
	void replace(Node<T> *p, T e); //Thay the phan tu luu trong p bang phan tu e va tra lai dia chi p
	Node<T>* insertAfter(Node<T> *p, T e); // Chen them node sau node do p tro toi
	Node<T>* insertFirst(T e); // Chen them 1 node vao dau danh sach
	Node<T>* insertLast(T e);  //Chen them mot node vao cuoi danh sach
	void remove(Node<T> *p);		 // Loai bo node do con tro p tro toi
	Node<T>* getNode(int i);
};
//-------------------------------------------------------------------------------------------------------------------------------
template <class T>
SingleList<T>::SingleList(){
	header	= NULL;
	trailer = NULL;
	n		= 0;
}
//-------------------------------------------------------------------------------------------------------------------------------
template <class T>
long SingleList<T>::size (){
	return n;
}
//-------------------------------------------------------------------------------------------------------------------------------
template <class T>
int SingleList<T>::isEmpty(){
   return n == 0;	
}
//-------------------------------------------------------------------------------------------------------------------------------
template <class T>
Node<T>* SingleList<T>::first(){
	return header;
}
template <class T>
Node<T>* SingleList<T>::last(){
	return trailer;
}
//-------------------------------------------------------------------------------------------------------------------------------
// Thay the phan tu luu trong node do co dia chi luu trong p bang phan tu co gia tri e
template <class T>
void SingleList<T>::replace(Node<T>* p,T e){
	p->setElem(e);
}
//-------------------------------------------------------------------------------------------------------------------------------
template <class T>
Node<T>* SingleList<T>::insertAfter(Node<T>* p, T e){
	Node<T> *q;
	q = new Node<T>;
	q->setElem(e);
	
	q->setNext(p->getNext());
	p->setNext(q);
	
	if(p==trailer)
		trailer = q;
	n++;
	return q;
}
//-------------------------------------------------------------------------------------------------------------------------------
template <class T>
Node<T>* SingleList<T>::insertFirst(T e){
	Node<T>* q;
	q = new Node<T>;
	q->setElem(e);
	
	if(isEmpty()){
		header  = q;
		trailer = q;
	}
	else{
		q->setNext(header);
		header = q;
	}
	n++;
	return q;
}
//-------------------------------------------------------------------------------------------------------------------------------
template <class T>
Node<T>* SingleList<T>::insertLast(T e){
	Node<T> *q;
	q = new Node<T>;
	q->setElem(e);

	if(isEmpty()){
		header  = q;
		trailer = q;
	}
	else{
		trailer->setNext(q);
		trailer = q;
		}
	n++;
	return q;
}
//-------------------------------------------------------------------------------------------------------------------------------
template <class T>
void SingleList<T>:: remove(Node<T>* p){
	Node<T> *q;
	if(p==header){
		if(size()==1){
			header  = NULL;
			trailer = NULL;
		}
		else
			header	= header->getNext();		
	}
	else{
		q	= header;
		while(q->getNext()!= p)			// Vong lap tim den vi tri cua node truoc node p
			q = q->getNext();
		if(q!=NULL){					//Tim thay node can xoa
			if(p!=trailer)
				q->setNext(p->getNext());
			else
				trailer = q;					
		}
	}
	n--;	
	delete []p;
}
//-----------------------------------------------------------------------
template<class T>
 Node<T>* SingleList<T>::getNode(int i)
 {
	if(i<0 || isEmpty())
	  return NULL;
	Node<T> *p;
	int dem=0;
	p = header;
	while(dem<i && p!=NULL){
	  dem++;
	  p = p->getNext();
	}
	return p;
 }
#endif
int main ()
{
SingleList<int> L;
for(int i =1;i<=10;i++) L.insertLast(i);
slist<int>::iterator it=L.begin();

L.insert(it,0);
L.erase(it);
//node<int> *it = L.gethead();
//for(;it!=NULL;it=it->getNext()) cout<<it->getElem();
for(slist<int>::iterator it=L.begin();it!=L.end();it++) cout<<*it;

  return 0;
}

